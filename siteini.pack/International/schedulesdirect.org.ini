**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: schedulesdirect.org
* @MinSWversion: V5.0
* @Revision 6 - [15/08/2025] Blackbear199
*   - improvements
* @Revision 5 - [15/07/2024] Blackbear199
*   - episode fix
*   - other improvements
* @Revision 4 - [14/07/2024] Blackbear199
*   - urlindex fix
*	- add compression
*   - max days to 14
*   - fix credits
* @Revision 3 - [15/11/2015] Jan van Straaten
*	- remove of faulty credits role solution
* @Revision 2 - [24/10/2015] Francis De Paemeleere
*   - speedup parsing (tested with V1.56.6)
* @Revision 1 - [23/10/2014] Jan van Straaten
*   - adapted site changes
* @Revision 0 - [31/08/2013] Jan van Straaten / Francis De Paemeleere
*   - creation
* @Remarks:
*    **** It is recommended to disable channels from your lineups you are not using via your schedulesdirect account.
* 1. Add your schedulesdirect username and password to the following line(add it to your WebGrab++.config.xml)
*    <credentials user="username" password="password">schedulesdirect.org</credentials>
* 2. Channel creation
*    <update>c</update>
* @header_end
**------------------------------------------------------------------------------------------------
site {url=schedulesdirect.org|timezone=UTC|maxdays=14.1|cultureinfo=en-US|charset=UTF-8|titlematchfactor=90|keepindexpage|allowlastdayoverflow}
site {ratingsystem=MPAA|episodesystem=onscreen|subtitlestype=teletext|compression=br}
*
scope.range {(urlindex)|end}
url_index {url|http://dd.schedulesdirect.org/schedulesdirect/tvlistings/xtvdService}
url_index.headers {method=SOAP}
url_index.headers {accept=text/xml|contenttype=text/xml;charset="utf-8"}
url_index.headers {credentials='config_credentials_user','config_credentials_password'}
url_index.headers {postdata=<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:tvDataDelivery"><soapenv:Header/><soapenv:Body><urn:download soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><startTime xsi:type="xsd:string">'global_temp_3'Z</startTime><endTime xsi:type="xsd:string">'global_temp_4'Z</endTime></urn:download></soapenv:Body></soapenv:Envelope>}
url_index.headers {customheader=SOAPAction=urn:tvDataDelivery#download}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
global_temp_6.modify {set|'config_site_id'}
global_temp_1.modify {calculate(format=F0)|'config_timespan_days' 1 +}
global_temp_2.modify {calculate(format=date,zzz)|'now'}
*
global_temp_1.modify {set(> "14")|14}
global_temp_2.modify {calculate(format=timespan,hours)}
*
global_temp_3.modify {calculate(format=date,yyyy-MM-ddTHH:mm:ss)|'urldate_formatted' 'global_temp_2' -}
global_temp_4.modify {calculate(format=date,yyyy-MM-ddTHH:mm:ss)|'global_temp_3' 'global_temp_1':0:0 +}
*
urldate.format {datestring|yyyy/MM/dd}
end_scope
*
scope.range {(splitindex)|end}
global_temp_9.scrub {regex||<programs>(.*?)</programs>||}
global_temp_8.scrub {regex||<productionCrew>(.*?)</productionCrew>||}
global_temp_7.scrub {regex||<genres>(.*?)</genres>||}
*
index_showsplit.scrub {regex||<schedules>(?:.*?)(?:(<schedule[^>]*station=\''global_temp_6'\'[^>]*>)(?:.*?))*</schedules>||}
index_showsplit.modify {cleanup(removeduplicates)}
end_scope
*
scope.range {(indexshowdetails)|end}
index_start.scrub {single|time='||Z'|Z'}
index_duration.scrub {regex||duration=\'PT(\d+H?\d*)M?\d*S?\'||}
index_rating.scrub {single|tvRating='||'|'}
index_videoquality.scrub {single|hdtv='||'|'}
index_subtitles.scrub {regex||closeCaptioned='(true)'||}
index_premiere.scrub {single|premier_finale='||'|'}
index_temp_9.scrub {single|program='||'|'}
index_temp_8.scrub {regex||live_tape=\'(Live)\'||}
index_temp_7.scrub {regex||new=\'(true)\'||}
*
index_duration.modify {replace|H|:}
index_duration.modify {replace(type=regex)|":$"|:00}
index_videoquality.modify {replace(not "")|'index_videoquality'|HDTV}
index_premiere.modify {set(~ "Premiere")|true}
* program info
index_temp_1.modify {substring(type=regex)|'global_temp_9' "^.*?<program id=\''index_temp_9'\'>(.*?)<\/program>"}
*
index_title.modify {substring(type=regex)|'index_temp_1' "<title>(.*?)<\/title>"}
index_subtitle.modify {substring(type=regex)|'index_temp_1' "<subtitle>(.*?)<\/subtitle>"}
*
*index_title.modify {addend('index_temp_7' not "")| *}
index_description.modify {substring(type=regex)|'index_temp_1' "<description>(.*?)<\/description>"}
index_description.modify {addend('index_temp_8' not "")|(Live)}
index_description.modify {addend('index_temp_7' not "")|(New)}
*
index_category.modify {substring(type=regex)|'index_temp_1' "<showType>(.*?)<\/showType>"}
index_productiondate.modify {substring(type=regex)|'index_temp_1' "<year>(\d{4})<\/year>"}
index_episode.modify {substring(pattern="'E1'" type=regex)|'index_temp_1' "<syndicatedEpisodeNumber>(\d+)<\/syndicatedEpisodeNumber>"}
*
index_temp_2.modify {substring(type=regex)|'index_temp_1' "<mpaaRating>(.*?)<\/mpaaRating>}
index_temp_3.modify {substring(type=regex)|'index_temp_1' "<advisory>(.*?)<\/advisory>"}
index_rating.modify {addend|\|'index_temp_2'\|'index_temp_3'}
*
index_starrating.modify {substring(type=regex)|'index_temp_1' "<starRating>(\*+)\+?</starRating>"}
index_temp_2.modify {substring(type=regex)|'index_temp_1' "<starRating>\**(\+)</starRating>"}
index_starrating.modify {calculate(not "" type=char format=F0)|#}
index_starrating.modify {addend('index_temp_2' not "")|.5}
index_starrating.modify {calculate(not "" format=F1)|2.5 *}
*
index_temp_3.modify {substring(type=regex)|'index_temp_1' "<originalAirDate>(.*?)</originalAirDate>"}
index_previousshown.modify {set(['index_temp_7' ""] ['index_premiere' ""] &)|true}
index_previousshown.modify {addend(['index_previousshown' not ""] ['index_temp_3' not ""] &)|(start='index_temp_3')}
* production crew
index_temp_1.modify {substring(type=regex)|'global_temp_8' "^.*?<crew program=\''index_temp_9'\'>(.*?)<\/crew>"}
*
index_director.modify {substring(type=regex)|'index_temp_1' "Director<\/role>(.*?)</member>"}
index_actor.modify {substring(type=regex)|'index_temp_1' "(?:Actor\|Guest Star)<\/role>(.*?)<\/member>"}
index_presenter.modify {substring(type=regex)|'index_temp_1' "(?:Host\|Anchor)<\/role>(.*?)<\/member>"}
index_commentator.modify {substring(type=regex)|'index_temp_1' "Narrator<\/role>(.*?)<\/member>"}
index_producer.modify {substring(type=regex)|'index_temp_1' "(?:Executive )?Producer<\/role>(.*?)</member>"}
index_writer.modify {substring(type=regex)|'index_temp_1' "Writer<\/oler>(.*?)</member>"}
*
index_director.modify {cleanup(tags="<"">")}
index_actor.modify {cleanup(tags="<"">")}
index_producer.modify {cleanup(tags="<"">")}
index_writer.modify {cleanup(tags="<"">")}
index_presenter.modify {cleanup(tags="<"">")}
index_commentator.modify {cleanup(tags="<"">")}
*
index_director.modify {cleanup}
index_actor.modify {cleanup}
index_producer.modify {cleanup}
index_writer.modify {cleanup}
index_presenter.modify {cleanup}
index_commentator.modify {cleanup}
* genres
index_temp_1.modify {substring(type=regex)|'global_temp_7' "^.*?<programGenre program=\''index_temp_9'\'>(.*?)<\/programGenre>"}
*
index_temp_1.modify {substring(type=regex)|"<class>(.*?)<\/class>"}
index_category.modify {addstart('index_temp_1' not "")|'index_temp_1'\|}
end_scope
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*scope.range {(channellist)|end}
*index_site_id.scrub {multi|<station id='||'>|'>}
*index_site_channel.scrub {multi|<station|<name>|</name>|</station>}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
