**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: ardmediathek.de
* @MinSWversion: V5.5
* @Revision 1  - [16/10/2025] Blackbear199
*   - update
* @Revision 0  - [22/05/2025] Mat8861
*   - creation
* @Remarks: site name changed to ardmediathek.de
* @header_end
**------------------------------------------------------------------------------------------------
site {url=ardmediathek.de|timezone=Europe/Berlin|maxdays=7|cultureinfo=de-DE|charset=UTF-8|titlematchfactor=90|keepindexpage}
site {ratingsystem=FSK|episodesystem=onscreen}
*https://www.ardmediathek.de/programm/heute
scope.range {(urlindex)|end}
url_index {url|https://programm-api.ard.de/program/api/program?day=|urldate|}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
global_temp_1.modify {set|'config_site_id'}
*
urldate.format {datestring|yyyy-MM-dd}
end_scope
*
scope.range {(splitindex)|end}
index_showsplit.scrub {multi|"channels":[||],"creationDate"|],"creationDate"}
index_showsplit.modify{remove(type=regex)|"\!\?\?\!"}
index_showsplit.modify {replace(type=regex)|"\}(,)\{\"id\":[^,]*,\"trackingPiano\""|\|}
index_showsplit.modify {select|"\"id\":\"'global_temp_1'\"" ~}
index_showsplit.modify {substring(type=regex)|"\"timeSlots\":\[\[(.*?)\]\],\"publicationService\""}
index_showsplit.modify {replace|\},"channel":\{|\}\|"channel":\{}
index_temp_9.modify {substring(type=regex)|'index_showsplit' "\"broadcastedOn\":\"([^\"]*)"}
index_temp_9.modify {cleanup(removeduplicates link="index_showsplit")}
index_showsplit.modify {cleanup(style=unidecode)}
index_showsplit.modify {cleanup(style=jsondecode)}
index_showsplit.modify {replace(type=regex)|"\\[rn]+"| }
index_showsplit.modify {replace(type=regex)|"\s{2,}"| }
*index_showsplit.modify {(debug)}
end_scope
*
scope.range {(indexshowdetails)|end}
index_start.scrub {single(separator="+" include=first)|"broadcastedOn":"||"|"}
index_stop.scrub {single(separator="+" include=first)|"broadcastedEnd":"||"|"}
index_title.scrub {single|"coreTitle":"||",|",}
index_description.scrub {regex||"synopsis":"(.*?)(?:","\|"\})||}
index_presenter.scrub {single(separator=",""und")|"coreSubline":"Moderation: ||",|",}
index_episode.modify {substring(type=regex pattern="S'S1'E'E1'""S'S1'/E'E1'""'E1'""'E1'/'Et1'")|'index_title' "\((S\d+(?:\/)?E\d+)\)\|\((\d+)\)\|\((\d+\/\d+)\)"}
index_productiondate.scrub {single|"coreSubline":"||",|",}
index_rating.scrub {regex||"maturityContentRating":"FSK([1-9]\d+)"||} 
index_showicon.scrub {single|"src":"||"|"}
index_temp_1.scrub {single(exclude="Moderation")|"coreSubline":"||",|",}
*
index_title.modify {remove(type=regex)|"\(S\d+(?:\/)?E\d+\)\|\(\d+\)\|\(\d+\/\d+\)"}
index_country.modify {substring('index_productiondate' not "" type=regex)|'index_temp_1' "([^\s]*)\s\d{4}"}
index_showicon.modify {replace|{width}|384}
*
index_urlshow {url||"href":"||"|"}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate,br}
end_scope
*
scope.range {(showdetails)|end}
director.scrub {regex||{"name":"([^"]*)","type":"crew","role":"Regie","||}
actor.scrub {regex||{"name":"([^"]*","type":"cast","role":"[^"]*)","||}
presenter.scrub {regex||{"name":"([^"]*)","type":"host","role":"Moderation","||}
producer.scrub {single(separator=", "" / ")|"producerName":"||"|"}
writer.scrub {regex||{"name":"([^"]*)","type":"crew","role":"Drehbuch","||}
composer.scrub {regex||{"name":"([^"]*)","type":"crew","role":"Musik","||}
*
title.modify {addstart|'index_title'}
actor.modify {replace|","type":"cast","role":"|(role=}
actor.modify {addend(~ "role=")|)}
actor.modify {remove|(role=)}
end_scope
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start  
*scope.range {(channellist)|end}
*index_site_id.scrub {regex||\{"id":"([^"]*)","trackingPiano"||}
*index_site_channel.scrub {regex||\{"id":"[^"]*","trackingPiano":\{"widget_type":"vertical-widget","widget_title":"([^"]*)||}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
